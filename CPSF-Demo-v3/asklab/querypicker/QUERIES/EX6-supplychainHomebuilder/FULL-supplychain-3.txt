#const case=3.
#const pool=1.

%       -- to be used together with theory*.lp
%          and with step1-BASE.lp

% Reason optimistically about concerns, concerns default to unsatisfied,
% but concerns that have no requirements nor sub-concerns are vacuously
% satisfied.
%
% The example shows that, under this reasoning mode, the entire concern
% tree is satisfied.

% Enable optimistic inference on concern satisfaction
inference(concerns,optimistic).

% ------ Output Interface ------

output(D,property,"-",S) :- last_step(S), holds(sat(A),S), atomic_statement(P,A), descr(P,D).
output(C,concern,F,S) :- last_step(S), holds(sat(C,F),S),concern(C),not aspect(C), C!=all.
output(C,aspect,F,S) :- last_step(S), holds(sat(C,F),S),aspect(C).
output("concern-tree",tree,F,S) :- last_step(S), holds(sat(all,F),S).

output(C,"concern/aspect (unk)",F,S) :- 
	inference(concerns,skeptical),
	last_step(S), concern(C), relevantToFunc(C,F), 
	not holds(sat(C,F),S),
	not holds(sat(C,F),S).

output_headings("satisfied concern/aspect/property","type","function","step").

% Display replacement information
output(replace_quality(Amt,Q),"corrective-measure","-",S) :- last_step(S), replacement(Amt,Q).
% ======== SIMPLE EXAMPLE 1 ========
%       -- to be used together with theory*.lp
%          and with step1-{optimistic,skeptical,pessimistic}.lp
%
% SYSTEM DESCRIPTION
% Input device 1 can operate in one of slow-mode and fast-mode.
% The SAM determines the mode of operation of input device 1.
% Normally, input device 1 reads inputs with a consistent frequency.
% If the basic type of input device 1 is configured to use
% encrypted memory and fast-mode, then the device will be
% unable to maintain a consistent frequency of reading.
%
% CONFIGURATION
% The SAM and input device 1 are configured to use encrypted 
% memory and secure boot. 
% The basic type of input device 1 is used.
% The SAM is configured to set input device 1 to slow-mode.
%
% Questions:
%   1. Is the functionality concern satisfied?
%   2. Is the functional aspect satisfied?
%   3. Are all aspects satisfied?
% 
% Answers:
%   1. Yes
%   2. Yes (because all concerns and sub-concerns of functional aspect are satisfied)
%   3. Yes (because all aspects are satisfied)




% ------ Initial state of the CPS ------

% Properties
% ---Observations
%obs(sat("encrypted_mem_input1"),false).
%obs(sat("encrypted_mem_sam"),false).
%obs(sat("sec_boot_input1"),false).
%obs(sat("sec_boot_sam"),false).
%obs(sat("slow_mode_input1"),false).

step(0).

% TO BE CHANGED IN ONTOLOGY <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< 
% --- not needed ---
% Must rename cpsf:addressedByProperty to cpsf:addresses and invert arguments
%input(P,"cpsf:addresses",C) :- input(C,"cpsf:addressedByProperty",P).

% TO BE CHANGED IN ONTOLOGY <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< 
% --- not needed ---
%% Must populate cpsf:addressesAtFunc -- set to bc1 by default
%other_func(P,C,"cpsf:bc1") :-
%	input(P,"cpsf:addressesAtFunc",F), 
%	input(C,"cpsf:addressedByProperty",P),
%	F != "cpsf:bc1".
%input(P,"cpsf:addressesAtFunc","cpsf:bc1") :- 
%	input(C,"cpsf:addressedByProperty",P),
%	not other_func(P,C,"cpsf:bc1").

% impacts of requirements -- shortcut using addresses/3, from cpsf:addressedByProperty and cpsf:addressesAtFunc
%holds(impacted(C,F,pos),S) :-
%	step(S),
%	addresses(A,C,F),
%	holds(sat(A),S).

%%%%% NOTE: to use inference on the satisfaction of concerns,
%%%%%       one MUST define one of the following facts:
%%%%%
%%%%%         inference(concerns,pessimistic)
%%%%%         inference(concerns,skeptical)
%%%%%         inference(concerns,optimistic)


% ------ Input Interface ------

property(P) :- input(P,"rdf:type","cpsf:Property").
descr(P,D) :- input(P,"rdfs:comment",D).
atomic_statement(P,A) :- input(P,"cpsf:atomicStatement",A).
isAssertion(P) :- input(P,"cpsf:hasType","cpsf:PropertyType_Assertion").
concern(C) :- input(C,"rdf:type","cpsf:Concern").
aspect(A) :- input(A,"rdf:type","cpsf:Aspect").
subconcern(S,O) :- input(S,"cpsf:includesConcern",O).

% every aspect is a concern
concern(A) :- aspect(A).

% meta-aspect "all", which is a parent of every aspect
concern(all).
subconcern(all,A) :-
	aspect(A).

% TO BE CHANGED IN ONTOLOGY <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< 
% --- not needed ---
%%addressedBy(C,P) :- input(C,"cpsf:addressedByProperty",P).
%addresses(A,C,F) :- 
%	input(P,"cpsf:addresses",C),
%	input(P,"cpsf:addressesAtFunc",F),
%	atomic_statement(P,A),
%	isAssertion(P).
	


nextFC(F1,F2) :- input(F2,"cpsf:nextFC",F1).
% Auxiliary relation isFunctionClass
isFunctionClass(F1) :- nextFC(F1,F2).
isFunctionClass(F2) :- nextFC(F1,F2).
functionClass(F,FC) :- isFunctionClass(FC), input(F,"rdf:type",FC).
refinedInto(F1,F2) :- input(F1,"cpsf:refinedInto",F2).
hasBC(APP,BC) :- input(APP,"cpsf:hasBC",BC).
relevantToFunc(C,F) :- input(C,"cpsf:relevantToFunc",F).

% a concern is relevant to F if a sub-concern is relevant to F  
relevantToFunc(C1,F) :- relevantToFunc(C2,F), subconcern(C1,C2).


-isAssertion(P) :- property(P), not isAssertion(P).

% Identify the last step in the input
last_step(S) :-
	step(S),
	S2=S+1,
	not step(S2).

rule(R) :- input(R,"cpsf:addressesConcern",C).
addressesAtFunc(R,F) :- input(R,"cpsf:addressesAtFunc",F).
addressesConcern(R,C) :- input(R,"cpsf:addressesConcern",C).
addressesPolarity(R,P) :- input(R,"cpsf:addressesPolarity",PO), asp_polarity(PO,P).
%
hasCondition(R,C) :- input(R,"cpsf:hasCondition",C).
conditionProperty(C,A) :- input(C,"cpsf:conditionProperty",P), atomic_statement(P,A).
conditionPolarity(C,P) :- input(C,"cpsf:conditionPolarity",PO), asp_polarity(PO,P).
asp_polarity("cpsf:positive",pos).
asp_polarity("cpsf:negative",neg).


% ------ Theory ------

% transitive closure of subconcern/2
tc(subconcern(C1,C2)) :- subconcern(C1,C2).
tc(subconcern(C1,C2)) :- subconcern(C1,C3), tc(subconcern(C3,C2)).

% transitive closure of subconcern/2, reflexive variant
tc0(subconcern(C,C)) :- concern(C).
tc0(subconcern(C1,C2)) :- tc(subconcern(C1,C2)).


% ---------------> Impact of requirements on concerns <---------------
% ASSUMPTION: satisfaction of concerns does not affect satisfaction of properties
addresses(Q,C,F) :-
	rule(Rule),
	addressesAtFunc(Rule,F),
	addressesConcern(Rule,C),
	hasCondition(Rule,Cond),
	conditionProperty(Cond,Q).


holds(impacted(C,F,M),S) :-
	step(S),
	rule(Rule),
	addressesAtFunc(Rule,F),
	addressesConcern(Rule,C),
	addressesPolarity(Rule,M),
	body_satisfied(Rule,S).

body_satisfied(Rule,S) :-
	step(S),
	rule(Rule),
	not -body_satisfied(Rule,S).

-body_satisfied(Rule,S) :-
	step(S),
	rule(Rule),
	hasCondition(Rule,Cond),
% ASSUMPTION: satisfaction of concerns does not affect satisfaction of properties
	-condSat(Cond,S).

% ASSUMPTION: satisfaction of concerns does not affect satisfaction of properties
-condSat(Cond,S) :-
	step(S),
	hasCondition(Rule,Cond),
	conditionProperty(Cond,A),
	conditionPolarity(Cond,pos),
	not holds(sat(A),S).

% ASSUMPTION: satisfaction of concerns does not affect satisfaction of properties
-condSat(A,S) :-
	step(S),
	hasCondition(Rule,Cond),
	conditionProperty(Cond,A),
	conditionPolarity(Cond,neg),
	not -holds(sat(A),S).


% DEBUGGING
%condSat(Cond,S) :-
%	step(S),
%	hasCondition(Rule,Cond),
%	conditionProperty(Cond,A),
%	conditionPolarity(Cond,pos),
%	not -holds(sat(A),S).
%condSat(A,S) :-
%	step(S),
%	hasCondition(Rule,Cond),
%	conditionProperty(Cond,A),
%	conditionPolarity(Cond,neg),
%	not holds(sat(A),S).


% The satisfaction of requirements is handled explicitly
% by user-provided state constraints
%-holds(sat_property(A),S) :-
%	step(S),
%	atomic_statement(P,A),
%	isAssertion(P),
%	not holds(A,S).
%
%-holds(sat(C),S) :-
%	step(S),
%	addresses(C,P),
%	atomic_statement(P,A), 
%	-holds(sat_property(A),S).

fluent(sat(A)) :- atomic_statement(P,A).
fluent(sat(A)) :- config_feature(A).
fluent(sat(C,F)) :- relevantToFunc(C,F).
impact_mode(pos). impact_mode(neg).
fluent(impacted(C,F,M)) :- concern(C), isFunctionClass(F), impact_mode(M).


% sat_sub(C,F) holds iff every relevant sub-concern of C is satisfied
%-holds(sat_sub(C1,F),S) :-
%	step(S), relevantToFunc(C1,F),
%	subconcern(C1,C2), relevantToFunc(C2,F),
%	not holds(sat(C2,F),S).
%fluent(sat_sub(C,F)) :- relevantToFunc(C,F).
%defined(neg,sat_sub(C,F)) :- relevantToFunc(C,F).

% The satisfaction of C in F is impacted by some combination of requirements at S
impacted(C,F,S) :-
	step(S), relevantToFunc(C,F),impact_mode(M),
	holds(impacted(C,F,M),S).

% Concern C has at least one relevant sub-concern in function F
has_relevant_subconcern(C1,F) :-
	subconcern(C1,C2), relevantToFunc(C2,F).

% A concern is positively influenced if:
% 1. a combination of requirements impacts it positively OR
% 2. a relevant sub-concern is satisfied
positively_influenced(C,F,S) :-
	step(S), relevantToFunc(C,F),
	holds(impacted(C,F,pos),S).
positively_influenced(C1,F,S) :-
	step(S), relevantToFunc(C1,F),
%	has_relevant_subconcern(C1,F),
%	holds(sat_sub(C1,F),S).
	subconcern(C1,C2), relevantToFunc(C2,F),
	holds(sat(C2,F),S).

% A concern is negatively influenced if:
% 1. a combination of requirements impacts it negatively OR
% 2. a relevant sub-concern is unsatisfied
negatively_influenced(C,F,S) :-
	step(S), relevantToFunc(C,F),
	holds(impacted(C,F,neg),S).
negatively_influenced(C1,F,S) :-
	step(S), relevantToFunc(C1,F),
%	has_relevant_subconcern(C1,F),
%	-holds(sat_sub(C1,F),S).
	subconcern(C1,C2), relevantToFunc(C2,F),
	-holds(sat(C2,F),S).

% A concern is affected by uncertain influence (from its sub-concerns) if:
% 1. a relevant sub-concern has unknown satisfaction
uncertainly_influenced(C1,F,S) :-
	step(S), relevantToFunc(C1,F),
%	has_relevant_subconcern(C1,F),
%	not holds(sat_sub(C1,F),S),
%	not -holds(sat_sub(C1,F),S).
	subconcern(C1,C2), relevantToFunc(C2,F),
	not holds(sat(C2,F),S),
	not -holds(sat(C2,F),S).


%%%%%%%% INFERENCE ON CONCERN SATISFACTION
%
% Select the type of inference with:
%
%   inference(concerns,pessimistic)
%   inference(concerns,skeptical)
%   inference(concerns,optimistic)
%

% PESSIMISTIC INFERENCE ON CONCERN SATISFACTION
% This is the simplest case, where concerns default to unsatisfied
% 
% A concern (in a given function f, e.g. use case u1) is satisfied if:
%   1. it is positively influenced AND
%   2. it is not negatively influenced
holds(sat(C,F),S) :-
	inference(concerns,pessimistic),
	step(S), relevantToFunc(C,F),
	positively_influenced(C,F,S),
	not negatively_influenced(C,F,S).

likelihood(sat(C,F),S,L) :-
	inference(concerns,pessimistic),
	step(S), relevantToFunc(C,F),
	positively_influenced(C,F,S),
	not negatively_influenced(C,F,S),
	likelihood_sat(C,F,S,L).
	%degree_impacted_pos(C,F,S,L).

% A concern is unsatisfied in all other cases.
defined(pos,sat(C,F)) :- inference(concerns,pessimistic), relevantToFunc(C,F). 

% SKEPTICAL INFERENCE ON CONCERN SATISFACTION
% This is a more advanced case, where the satisfaction status of a
% concern may remain unknown/undecided/uncertain
% 
% A concern (in a given function f, e.g. use case u1) is satisfied if:
%   1. it is positively influenced AND
%   2. it is not negatively influenced AND
%   3. is not affected by uncertain influence
holds(sat(C,F),S) :-
	inference(concerns,skeptical),
	step(S), relevantToFunc(C,F),
	positively_influenced(C,F,S),
	not negatively_influenced(C,F,S),
	not uncertainly_influenced(C,F,S).

likelihood(sat(C,F),S,D) :-
	inference(concerns,skeptical),
	step(S), relevantToFunc(C,F),
	positively_influenced(C,F,S),
	not negatively_influenced(C,F,S),
	not uncertainly_influenced(C,F,S),
	likelihood_sat(C,F,S,D).
	%degree_impacted_pos(C,F,S,D).

% A concern is unsatisfied if:
%   1. it is negatively influenced AND
%   2. it is not positively influenced AND
%   3. is not affected by uncertain influence
-holds(sat(C,F),S) :-
	inference(concerns,skeptical),
	step(S), relevantToFunc(C,F),
	negatively_influenced(C,F,S),
	not positively_influenced(C,F,S),
	not uncertainly_influenced(C,F,S).
% OR
%   1. it has no relevant sub-concerns AND
%   2. it is not positively influenced AND
%   3. it is not negatively influenced
-holds(sat(C,F),S) :-
	inference(concerns,skeptical),
	step(S), relevantToFunc(C,F),
	not has_relevant_subconcern(C,F),
	not positively_influenced(C,F,S),
	not negatively_influenced(C,F,S).


% The satisfaction status of a concern is unknown in all other cases.
% Implemented by making sat(C,F) inertial rather than defined


% OPTIMISTIC INFERENCE ON CONCERN SATISFACTION
% This is another simple case, where concerns default to unsatisfied,
% but concerns that have no requirements nor sub-concerns are vacuously
% satisfied.
% 
% A concern (in a given function f, e.g. use case u1) is satisfied if:
%   1. it is positively influenced AND
%   2. it is not negatively influenced
holds(sat(C,F),S) :-
	inference(concerns,optimistic),
	step(S), relevantToFunc(C,F),
	positively_influenced(C,F,S),
	not negatively_influenced(C,F,S).
likelihood(sat(C,F),S,D) :-
	inference(concerns,optimistic),
	step(S), relevantToFunc(C,F),
	positively_influenced(C,F,S),
	not negatively_influenced(C,F,S),
	likelihood_sat(C,F,S,D).
	%degree_impacted_pos(C,F,S,D).
% OR
%   1. it has no relevant sub-concerns AND
%   2. it is not positively influenced AND
%   3. it is not negatively influenced
holds(sat(C,F),S) :-
	inference(concerns,optimistic),
	step(S), relevantToFunc(C,F),
	not has_relevant_subconcern(C,F),
	not positively_influenced(C,F,S),
	not negatively_influenced(C,F,S).
likelihood(sat(C,F),S,D) :-
	inference(concerns,optimistic),
	step(S), relevantToFunc(C,F),
	not has_relevant_subconcern(C,F),
	not positively_influenced(C,F,S),
	not negatively_influenced(C,F,S),
	likelihood_sat(C,F,S,D).
	%degree_impacted_pos(C,F,S,D).

% A concern is unsatisfied in all other cases.
defined(pos,sat(C,F)) :- inference(concerns,optimistic), relevantToFunc(C,F). 


%%%% Relatedness of requirements across functions

% Definition. Requirement q1 is refined into requirement q2
% if they address the same concern in two functions F1 and F2
% and F1 is refined into F2.
refinedInto(Q1,Q2) :-
	addresses(Q1,C,F1),
	addresses(Q2,C,F2),
	refinedInto(F1,F2).

% Definition. Requirement q1 is related to requirement q2
% if there is a sequence r_1,...,r_k of requirements such that 
% q1 =r_1, q2=r_k, and every r_i is refined into r_i+1.
related(Q1,Q2) :-
	refinedInto(Q1,Q2),
	addresses(Q1,C,F1),	% make sure Q1, Q2 are requirements
	addresses(Q2,C,F2). % rather than functions

related(Q1,Q3) :-
	refinedInto(Q1,Q2),
	related(Q2,Q3).


%%%%%%%% OBSERVATIONS


% initial state of the CPS

holds(F,0) :-
	fluent(F),
	obs(F,true).

-holds(F,0) :-
	fluent(F),
	obs(F,false).

holds(F,0) :-
	fluent(F),
	assumed(F,true),
	not -holds(F,0).

-holds(F,0) :-
	fluent(F),
	assumed(F,false),
	not holds(F,0).

% Ad-hoc for prob_of_state functional fluent
holds(prob_of_state(100),0).

% next state: inertia axioms
is_defined(F) :- fluent(F), defined(M,F).

% NOTE: inertial for numerical fluents is defined on a case-by-case basis
-inertial(F) :- is_numerical(F).
-inertial(F) :- is_defined(F).

holds(F,S2) :-
	fluent(F),
	not -inertial(F),
	step(S), step(S2), S2=S+1,
	holds(F,S),
	not -holds(F,S2).

-holds(F,S2) :-
	fluent(F),
	not -inertial(F),
	step(S), step(S2), S2=S+1,
	-holds(F,S),
	not holds(F,S2).

holds(F,S) :-
	fluent(F),
	defined(neg,F),
	step(S),
	not -holds(F,S).

-holds(F,S) :-
	fluent(F),
	defined(pos,F),
	step(S),
	not holds(F,S).

% effect of a negative impact
-holds(A,S) :-
	impacted(neg,A,S).


% Ad-hoc treatment of prob_of_state functional fluent
holds(prob_of_state(P2),S2) :-
	step(S), step(S2), S2=S+1,
	holds(prob_of_state(P),S),
	do(A,S),
	prob_success(A,PSucc),
	P2a=P*PSucc,
	P2=P2a/100.

-unk_prob_success(S) :-
	step(S),
	do(A,S), prob_success(A,PSucc).
unk_prob_success(S) :-
	step(S),
	not -unk_prob_success(S).

holds(prob_of_state(P),S2) :-
	step(S), step(S2), S2=S+1,
	holds(prob_of_state(P),S),
	unk_prob_success(S).
#const maxTime=4.
 step(0..maxTime). 

%% parameter 

example(case).		% case = 1, 2, 3
fund(pool).                 % pool = 1, 2 

% initial situation - standard 
init(board(0,0..2)).

% observations along the history 

%% Example 1 
%% nothing is satisfied 

observation(delivered(5000,1), 1)       :- example(1).  
observation(delivered(500,2), 1)         :- example(1).    

%% Example 2
%% Pay 50K for shipping - clause 4 is satisfied  

observation(delivered(5000,1), 1)       :- example(2).  
observation(delivered(500,2), 1)         :- example(2).    
observation(paid(50000, shipping), 3):- example(2).   

%% Example 3
%% Pay 50K for shipping - clause 4 is satisfied  
%% Delivery all boards - clause 2 is satisfied 
%% Pay enough for board - clause 3 is satisfied 
%% Delivery all boards - clause 1 is satisfied 


observation(delivered(5000,1), 1)      :- example(3).  
observation(delivered(500,1), 2)        :- example(3).    
observation(delivered(138500,1), 3)  :- example(3).    

observation(paid(50000, board), 2)    :- example(3).  
observation(paid(75000, board), 3)    :- example(3). 
observation(paid(50000, shipping), 3):- example(3).   

% sufficient funding 
init(available_fund(200000))   :- fund(1).   

% insufficient funding 
init(available_fund(100000))   :- fund(2).   


%% init(available_fund(100000)). 

% defining initial state 

holds(available_fund(X), 0):- init(available_fund(X)). 
holds(available_fund(0), 0):- not init(available_fund(_)).

holds(paid(0, board), 0).
holds(paid(0, shipping), 0).

% assimilate observations 

delivered(Y,T) :- observation(delivered(_,Y), T).                                             

%                                               
holds(board(X,Y), 0) :- init(board(X,Y)).

holds(board(X+X',Y), T+1) :- step(T), holds(board(X',Y), T),
                                              observation(delivered(X,Y),T).

holds(board(X,Y), T+1)  :- step(T), holds(board(X,Y), T), not delivered(Y, T).                                                

holds(board_cost(X), T) :- step(T), X = #sum {Y *10 : holds(board(Y, Q), T), Q >= 1}.

occurs(pay(X, Y), T) :- step(T), observation(paid(X, Y), T). 

ab(1):- step(T), Z = #sum{Y, B : occurs(pay(Y, B), T)}, holds(available_fund(X), T), X < Z.  

holds(available_fund(X-Z), T+1) :- step(T), holds(available_fund(X), T), 
                                                       Z = #sum{Y, B : occurs(pay(Y, B), T)}, X >= Z. 

holds(available_fund(X), T+1) :- step(T), holds(available_fund(X), T), 
                                                       Z = #sum{Y, B : occurs(pay(Y, B), T)}, X < Z. 
                                                   
holds(paid(X+Z, Y), T+1) :- step(T), holds(paid(X, Y), T), occurs(pay(Z, Y), T), not ab(1).                                                      

holds(paid(X, Y), T+1) :- step(T),  holds(paid(X, Y), T),  #count{X' : occurs(pay(X',Y), T)} == 0.                                                       

holds(paid(X, Y), T+1) :- step(T),  holds(paid(X, Y), T),  #count{X' : occurs(pay(X',Y), T)} > 0, ab(1).                                                       

                                               
% C1: L  responsible_for    board(144K, Q) , 1 <= Q  when  by_week 4    
% C2: L  responsible_for    delivered(144K, Q) , 2 <= Q  when  by_week 4  
% C3: H  responsible_for    payment(122K, board)  when  by_week 4    
% C4: H  responsible_for    exists(X), X >= 50K, payment(X, shipping)  when  by_week 4   

clause(c1, lumber, phi_1, by(4)). 
clause(c2, lumber, phi_2, by(4)). 
clause(c3, homes, phi_3, by(4)). 
clause(c4, homes, phi_4, by(4)). 

holds(phi_1, T) :- step(T), #sum{X : observation(delivered(X, Q), T'), Q>=1, T>=T'} >= 144000.  
holds(phi_2, T) :- step(T), #sum{X : holds(board(X, Q), T), Q>=1} >= 144000.  
holds(phi_3, T) :- step(T), holds(paid(Y, board), T), Y >= 122000.  
holds(phi_4, T) :- step(T), holds(paid(X, shipping), T), X >= 50000.  

satisfies(C, T) :- step(T), clause(C, _, F, by(N)), T<=N, holds(F, T). 
not_satisfies(C, T) :- step(T), clause(C, _, F, by(N)), T<=N, not holds(F, T). 
 
%% private_part(c1,  
 
%%% property("sufficient_material_for_building").  %% C1  %% "cpsf:TimeToMarket"  %% business aspect   
%%% property("material_safe_for_building").          %% C2  %% "cpsf:Reliability" and "cpsf:Safety" %% Trustworthiness 
%%% property("material_sufficiently_durable").      %% C2  %% "cpsf:Performance"
%%% property("promptly_send_payment").            %% C4  %% "cpsf:Policy"
%%% property("acceptable_shipping_cost").          %% C3  %% "cpsf:Cost"

%%% addressedBy("cpsf:TimeToMarket","sufficient_material_for_building").  
%%% addressedBy("cpsf:Cost","acceptable_shipping_cost"). 
%%% addressedBy("cpsf:Policy","promptly_send_payment"). 
%%% addressedBy("cpsf:Performance","material_sufficiently_durable").
%%% addressedBy("cpsf:Reliability","material_safe_for_building").
%%% addressedBy("cpsf:Safety","material_safe_for_building"). 

holds(sat("sufficient_material_for_building"), T):- step(T), holds(phi_1,T).
-holds(sat("sufficient_material_for_building"), T):- step(T), not holds(phi_1,T).

holds(sat("material_safe_for_building"), T):- step(T), holds(phi_2,T).
-holds(sat("material_safe_for_building"), T):- step(T), not holds(phi_2,T).

holds(sat("material_sufficiently_durable"), T):- step(T), holds(phi_2,T).
-holds(sat("material_sufficiently_durable"), T):- step(T), not holds(phi_2,T).

holds(sat("acceptable_shipping_cost"), T):- step(T), holds(phi_3,T).
-holds(sat("acceptable_shipping_cost"), T):- step(T), not holds(phi_3,T).

holds(sat("promptly_send_payment"), T):- step(T), holds(phi_4,T).
-holds(sat("promptly_send_payment"), T):- step(T), not holds(phi_4,T).

% To reduce the output, manually ground the following rule for concerns C that you are interested in

relevantToFunc("cpsf:Cost","cpsf:bc2")                  :- concern("cpsf:Cost").
relevantToFunc("cpsf:TimeToMarket","cpsf:bc2")   :- concern("cpsf:TimeToMarket").
relevantToFunc("cpsf:Policy","cpsf:bc2")                :- concern("cpsf:Policy").
relevantToFunc("cpsf:Performance","cpsf:bc2")     :- concern("cpsf:Performance").
relevantToFunc("cpsf:Reliability","cpsf:bc2")          :- concern("cpsf:Reliability").
relevantToFunc("cpsf:Safety","cpsf:bc2")               :- concern("cpsf:Safety").

% Quick workaround since I forgot to include descriptions for the new properties
descr(P,P) :- atomic_statement(P,A), not input(P,"rdfs:comment",_).

% The pair <Clause_ID, A> is in the private part of the contract. A is a property/requirement
private_part(C,A) :- input(C,"cpsf:addProperty",P), atomic_statement(P,A).

holds(impacted(C,"cpsf:bc2",pos),S) :-
	step(S),
	private_part(_,A),
	holds(sat(A),S),
	atomic_statement(P,A),
	input(P,"cpsf:addConcern",C).

holds(impacted(C,"cpsf:bc2",neg),S) :-
	step(S),
	private_part(_,A),
	-holds(sat(A),S),
	atomic_statement(P,A),
	input(P,"cpsf:addConcern",C).


% There are some LKAS properties in the base ontology that cause
% certain concerns to be satisfied. This rule ensures that
% all concerns addressed by properties that are not in a
% contract's private part are impacted negatively
holds(impacted(C,F,neg),S) :-
	step(S),
	addresses(A,C,F),
	not private_part(_,A).

% Link the internal names of clauses to their ontology names
holds(sat("sufficient_material_for_building"), T):- step(T), holds(phi_1,T).
-holds(sat("sufficient_material_for_building"), T):- step(T), not holds(phi_1,T).

holds(sat("material_safe_for_building"), T):- step(T), holds(phi_2,T).
-holds(sat("material_safe_for_building"), T):- step(T), not holds(phi_2,T).

holds(sat("material_sufficiently_durable"), T):- step(T), holds(phi_2,T).
-holds(sat("material_sufficiently_durable"), T):- step(T), not holds(phi_2,T).

holds(sat("acceptable_shipping_cost"), T):- step(T), holds(phi_3,T).
-holds(sat("acceptable_shipping_cost"), T):- step(T), not holds(phi_3,T).

holds(sat("promptly_send_payment"), T):- step(T), holds(phi_4,T).
-holds(sat("promptly_send_payment"), T):- step(T), not holds(phi_4,T).
% ------ Output Interface ------

descr("using_basic_input1","Basic type of input device 1 is in use").
event_descr(recipient_rejects,"recipient rejects input").
action_descr(patch(sam),"patch the SAM").
