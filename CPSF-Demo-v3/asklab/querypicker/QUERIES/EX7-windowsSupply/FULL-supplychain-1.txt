#const case=1.

%       -- to be used together with theory*.lp
%          and with step1-BASE.lp

% Reason optimistically about concerns, concerns default to unsatisfied,
% but concerns that have no requirements nor sub-concerns are vacuously
% satisfied.
%
% The example shows that, under this reasoning mode, the entire concern
% tree is satisfied.

% Enable optimistic inference on concern satisfaction
inference(concerns,optimistic).

% ------ Output Interface ------

output(D,property,"-",S) :- last_step(S), holds(sat(A),S), atomic_statement(P,A), descr(P,D).
output(C,concern,F,S) :- last_step(S), holds(sat(C,F),S),concern(C),not aspect(C), C!=all.
output(C,aspect,F,S) :- last_step(S), holds(sat(C,F),S),aspect(C).
output("concern-tree",tree,F,S) :- last_step(S), holds(sat(all,F),S).

output(C,"concern/aspect (unk)",F,S) :- 
	inference(concerns,skeptical),
	last_step(S), concern(C), relevantToFunc(C,F), 
	not holds(sat(C,F),S),
	not holds(sat(C,F),S).

output_headings("satisfied concern/aspect/property","type","function","step").

% Display replacement information
output(replace_quality(Amt,Q),"corrective-measure","-",S) :- replacement(Amt,Q,S).

output(A,action,"-",S) :- step(S), occurs(A,S).
% ======== SIMPLE EXAMPLE 1 ========
%       -- to be used together with theory*.lp
%          and with step1-{optimistic,skeptical,pessimistic}.lp
%
% SYSTEM DESCRIPTION
% Input device 1 can operate in one of slow-mode and fast-mode.
% The SAM determines the mode of operation of input device 1.
% Normally, input device 1 reads inputs with a consistent frequency.
% If the basic type of input device 1 is configured to use
% encrypted memory and fast-mode, then the device will be
% unable to maintain a consistent frequency of reading.
%
% CONFIGURATION
% The SAM and input device 1 are configured to use encrypted 
% memory and secure boot. 
% The basic type of input device 1 is used.
% The SAM is configured to set input device 1 to slow-mode.
%
% Questions:
%   1. Is the functionality concern satisfied?
%   2. Is the functional aspect satisfied?
%   3. Are all aspects satisfied?
% 
% Answers:
%   1. Yes
%   2. Yes (because all concerns and sub-concerns of functional aspect are satisfied)
%   3. Yes (because all aspects are satisfied)




% ------ Initial state of the CPS ------

% Properties
% ---Observations
obs(sat("encrypted_mem_input1"),false).
obs(sat("encrypted_mem_sam"),false).
obs(sat("sec_boot_input1"),false).
obs(sat("sec_boot_sam"),false).
obs(sat("slow_mode_input1"),false).

step(0).

% TO BE CHANGED IN ONTOLOGY <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< 
% --- not needed ---
% Must rename cpsf:addressedByProperty to cpsf:addresses and invert arguments
%input(P,"cpsf:addresses",C) :- input(C,"cpsf:addressedByProperty",P).

% TO BE CHANGED IN ONTOLOGY <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< 
% --- not needed ---
%% Must populate cpsf:addressesAtFunc -- set to bc1 by default
%other_func(P,C,"cpsf:bc1") :-
%	input(P,"cpsf:addressesAtFunc",F), 
%	input(C,"cpsf:addressedByProperty",P),
%	F != "cpsf:bc1".
%input(P,"cpsf:addressesAtFunc","cpsf:bc1") :- 
%	input(C,"cpsf:addressedByProperty",P),
%	not other_func(P,C,"cpsf:bc1").

% impacts of requirements -- shortcut using addresses/3, from cpsf:addressedByProperty and cpsf:addressesAtFunc
%holds(impacted(C,F,pos),S) :-
%	step(S),
%	addresses(A,C,F),
%	holds(sat(A),S).

%%%%% NOTE: to use inference on the satisfaction of concerns,
%%%%%       one MUST define one of the following facts:
%%%%%
%%%%%         inference(concerns,pessimistic)
%%%%%         inference(concerns,skeptical)
%%%%%         inference(concerns,optimistic)


% ------ Input Interface ------

property(P) :- input(P,"rdf:type","cpsf:Property").
descr(P,D) :- input(P,"rdfs:comment",D).
atomic_statement(P,A) :- input(P,"cpsf:atomicStatement",A).
isAssertion(P) :- input(P,"cpsf:hasType","cpsf:PropertyType_Assertion").
concern(C) :- input(C,"rdf:type","cpsf:Concern").
aspect(A) :- input(A,"rdf:type","cpsf:Aspect").
subconcern(S,O) :- input(S,"cpsf:includesConcern",O).

% every aspect is a concern
concern(A) :- aspect(A).

% meta-aspect "all", which is a parent of every aspect
concern(all).
subconcern(all,A) :-
	aspect(A).

% TO BE CHANGED IN ONTOLOGY <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< 
% --- not needed ---
%%addressedBy(C,P) :- input(C,"cpsf:addressedByProperty",P).
%addresses(A,C,F) :- 
%	input(P,"cpsf:addresses",C),
%	input(P,"cpsf:addressesAtFunc",F),
%	atomic_statement(P,A),
%	isAssertion(P).
	


nextFC(F1,F2) :- input(F2,"cpsf:nextFC",F1).
% Auxiliary relation isFunctionClass
isFunctionClass(F1) :- nextFC(F1,F2).
isFunctionClass(F2) :- nextFC(F1,F2).
functionClass(F,FC) :- isFunctionClass(FC), input(F,"rdf:type",FC).
refinedInto(F1,F2) :- input(F1,"cpsf:refinedInto",F2).
hasBC(APP,BC) :- input(APP,"cpsf:hasBC",BC).
relevantToFunc(C,F) :- input(C,"cpsf:relevantToFunc",F).

% a concern is relevant to F if a sub-concern is relevant to F  
relevantToFunc(C1,F) :- relevantToFunc(C2,F), subconcern(C1,C2).


-isAssertion(P) :- property(P), not isAssertion(P).

% Identify the last step in the input
last_step(S) :-
	step(S),
	S2=S+1,
	not step(S2).

rule(R) :- input(R,"cpsf:addressesConcern",C).
addressesAtFunc(R,F) :- input(R,"cpsf:addressesAtFunc",F).
addressesConcern(R,C) :- input(R,"cpsf:addressesConcern",C).
addressesPolarity(R,P) :- input(R,"cpsf:addressesPolarity",PO), asp_polarity(PO,P).
%
hasCondition(R,C) :- input(R,"cpsf:hasCondition",C).
conditionProperty(C,A) :- input(C,"cpsf:conditionProperty",P), atomic_statement(P,A).
conditionPolarity(C,P) :- input(C,"cpsf:conditionPolarity",PO), asp_polarity(PO,P).
asp_polarity("cpsf:positive",pos).
asp_polarity("cpsf:negative",neg).


% ------ Theory ------

% transitive closure of subconcern/2
tc(subconcern(C1,C2)) :- subconcern(C1,C2).
tc(subconcern(C1,C2)) :- subconcern(C1,C3), tc(subconcern(C3,C2)).

% transitive closure of subconcern/2, reflexive variant
tc0(subconcern(C,C)) :- concern(C).
tc0(subconcern(C1,C2)) :- tc(subconcern(C1,C2)).


% ---------------> Impact of requirements on concerns <---------------
% ASSUMPTION: satisfaction of concerns does not affect satisfaction of properties
addresses(Q,C,F) :-
	rule(Rule),
	addressesAtFunc(Rule,F),
	addressesConcern(Rule,C),
	hasCondition(Rule,Cond),
	conditionProperty(Cond,Q).


holds(impacted(C,F,M),S) :-
	step(S),
	rule(Rule),
	addressesAtFunc(Rule,F),
	addressesConcern(Rule,C),
	addressesPolarity(Rule,M),
	body_satisfied(Rule,S).

body_satisfied(Rule,S) :-
	step(S),
	rule(Rule),
	not -body_satisfied(Rule,S).

-body_satisfied(Rule,S) :-
	step(S),
	rule(Rule),
	hasCondition(Rule,Cond),
% ASSUMPTION: satisfaction of concerns does not affect satisfaction of properties
	-condSat(Cond,S).

% ASSUMPTION: satisfaction of concerns does not affect satisfaction of properties
-condSat(Cond,S) :-
	step(S),
	hasCondition(Rule,Cond),
	conditionProperty(Cond,A),
	conditionPolarity(Cond,pos),
	not holds(sat(A),S).

% ASSUMPTION: satisfaction of concerns does not affect satisfaction of properties
-condSat(A,S) :-
	step(S),
	hasCondition(Rule,Cond),
	conditionProperty(Cond,A),
	conditionPolarity(Cond,neg),
	not -holds(sat(A),S).


% DEBUGGING
%condSat(Cond,S) :-
%	step(S),
%	hasCondition(Rule,Cond),
%	conditionProperty(Cond,A),
%	conditionPolarity(Cond,pos),
%	not -holds(sat(A),S).
%condSat(A,S) :-
%	step(S),
%	hasCondition(Rule,Cond),
%	conditionProperty(Cond,A),
%	conditionPolarity(Cond,neg),
%	not holds(sat(A),S).


% The satisfaction of requirements is handled explicitly
% by user-provided state constraints
%-holds(sat_property(A),S) :-
%	step(S),
%	atomic_statement(P,A),
%	isAssertion(P),
%	not holds(A,S).
%
%-holds(sat(C),S) :-
%	step(S),
%	addresses(C,P),
%	atomic_statement(P,A), 
%	-holds(sat_property(A),S).

fluent(sat(A)) :- atomic_statement(P,A).
fluent(sat(A)) :- config_feature(A).
fluent(sat(C,F)) :- relevantToFunc(C,F).
impact_mode(pos). impact_mode(neg).
fluent(impacted(C,F,M)) :- concern(C), isFunctionClass(F), impact_mode(M).


% sat_sub(C,F) holds iff every relevant sub-concern of C is satisfied
%-holds(sat_sub(C1,F),S) :-
%	step(S), relevantToFunc(C1,F),
%	subconcern(C1,C2), relevantToFunc(C2,F),
%	not holds(sat(C2,F),S).
%fluent(sat_sub(C,F)) :- relevantToFunc(C,F).
%defined(neg,sat_sub(C,F)) :- relevantToFunc(C,F).

% The satisfaction of C in F is impacted by some combination of requirements at S
impacted(C,F,S) :-
	step(S), relevantToFunc(C,F),impact_mode(M),
	holds(impacted(C,F,M),S).

% Concern C has at least one relevant sub-concern in function F
has_relevant_subconcern(C1,F) :-
	subconcern(C1,C2), relevantToFunc(C2,F).

% A concern is positively influenced if:
% 1. a combination of requirements impacts it positively OR
% 2. a relevant sub-concern is satisfied
positively_influenced(C,F,S) :-
	step(S), relevantToFunc(C,F),
	holds(impacted(C,F,pos),S).
positively_influenced(C1,F,S) :-
	step(S), relevantToFunc(C1,F),
%	has_relevant_subconcern(C1,F),
%	holds(sat_sub(C1,F),S).
	subconcern(C1,C2), relevantToFunc(C2,F),
	holds(sat(C2,F),S).

% A concern is negatively influenced if:
% 1. a combination of requirements impacts it negatively OR
% 2. a relevant sub-concern is unsatisfied
negatively_influenced(C,F,S) :-
	step(S), relevantToFunc(C,F),
	holds(impacted(C,F,neg),S).
negatively_influenced(C1,F,S) :-
	step(S), relevantToFunc(C1,F),
%	has_relevant_subconcern(C1,F),
%	-holds(sat_sub(C1,F),S).
	subconcern(C1,C2), relevantToFunc(C2,F),
	-holds(sat(C2,F),S).

% A concern is affected by uncertain influence (from its sub-concerns) if:
% 1. a relevant sub-concern has unknown satisfaction
uncertainly_influenced(C1,F,S) :-
	step(S), relevantToFunc(C1,F),
%	has_relevant_subconcern(C1,F),
%	not holds(sat_sub(C1,F),S),
%	not -holds(sat_sub(C1,F),S).
	subconcern(C1,C2), relevantToFunc(C2,F),
	not holds(sat(C2,F),S),
	not -holds(sat(C2,F),S).


%%%%%%%% INFERENCE ON CONCERN SATISFACTION
%
% Select the type of inference with:
%
%   inference(concerns,pessimistic)
%   inference(concerns,skeptical)
%   inference(concerns,optimistic)
%

% PESSIMISTIC INFERENCE ON CONCERN SATISFACTION
% This is the simplest case, where concerns default to unsatisfied
% 
% A concern (in a given function f, e.g. use case u1) is satisfied if:
%   1. it is positively influenced AND
%   2. it is not negatively influenced
holds(sat(C,F),S) :-
	inference(concerns,pessimistic),
	step(S), relevantToFunc(C,F),
	positively_influenced(C,F,S),
	not negatively_influenced(C,F,S).

likelihood(sat(C,F),S,L) :-
	inference(concerns,pessimistic),
	step(S), relevantToFunc(C,F),
	positively_influenced(C,F,S),
	not negatively_influenced(C,F,S),
	likelihood_sat(C,F,S,L).
	%degree_impacted_pos(C,F,S,L).

% A concern is unsatisfied in all other cases.
defined(pos,sat(C,F)) :- inference(concerns,pessimistic), relevantToFunc(C,F). 

% SKEPTICAL INFERENCE ON CONCERN SATISFACTION
% This is a more advanced case, where the satisfaction status of a
% concern may remain unknown/undecided/uncertain
% 
% A concern (in a given function f, e.g. use case u1) is satisfied if:
%   1. it is positively influenced AND
%   2. it is not negatively influenced AND
%   3. is not affected by uncertain influence
holds(sat(C,F),S) :-
	inference(concerns,skeptical),
	step(S), relevantToFunc(C,F),
	positively_influenced(C,F,S),
	not negatively_influenced(C,F,S),
	not uncertainly_influenced(C,F,S).

likelihood(sat(C,F),S,D) :-
	inference(concerns,skeptical),
	step(S), relevantToFunc(C,F),
	positively_influenced(C,F,S),
	not negatively_influenced(C,F,S),
	not uncertainly_influenced(C,F,S),
	likelihood_sat(C,F,S,D).
	%degree_impacted_pos(C,F,S,D).

% A concern is unsatisfied if:
%   1. it is negatively influenced AND
%   2. it is not positively influenced AND
%   3. is not affected by uncertain influence
-holds(sat(C,F),S) :-
	inference(concerns,skeptical),
	step(S), relevantToFunc(C,F),
	negatively_influenced(C,F,S),
	not positively_influenced(C,F,S),
	not uncertainly_influenced(C,F,S).
% OR
%   1. it has no relevant sub-concerns AND
%   2. it is not positively influenced AND
%   3. it is not negatively influenced
-holds(sat(C,F),S) :-
	inference(concerns,skeptical),
	step(S), relevantToFunc(C,F),
	not has_relevant_subconcern(C,F),
	not positively_influenced(C,F,S),
	not negatively_influenced(C,F,S).


% The satisfaction status of a concern is unknown in all other cases.
% Implemented by making sat(C,F) inertial rather than defined


% OPTIMISTIC INFERENCE ON CONCERN SATISFACTION
% This is another simple case, where concerns default to unsatisfied,
% but concerns that have no requirements nor sub-concerns are vacuously
% satisfied.
% 
% A concern (in a given function f, e.g. use case u1) is satisfied if:
%   1. it is positively influenced AND
%   2. it is not negatively influenced
holds(sat(C,F),S) :-
	inference(concerns,optimistic),
	step(S), relevantToFunc(C,F),
	positively_influenced(C,F,S),
	not negatively_influenced(C,F,S).
likelihood(sat(C,F),S,D) :-
	inference(concerns,optimistic),
	step(S), relevantToFunc(C,F),
	positively_influenced(C,F,S),
	not negatively_influenced(C,F,S),
	likelihood_sat(C,F,S,D).
	%degree_impacted_pos(C,F,S,D).
% OR
%   1. it has no relevant sub-concerns AND
%   2. it is not positively influenced AND
%   3. it is not negatively influenced
holds(sat(C,F),S) :-
	inference(concerns,optimistic),
	step(S), relevantToFunc(C,F),
	not has_relevant_subconcern(C,F),
	not positively_influenced(C,F,S),
	not negatively_influenced(C,F,S).
likelihood(sat(C,F),S,D) :-
	inference(concerns,optimistic),
	step(S), relevantToFunc(C,F),
	not has_relevant_subconcern(C,F),
	not positively_influenced(C,F,S),
	not negatively_influenced(C,F,S),
	likelihood_sat(C,F,S,D).
	%degree_impacted_pos(C,F,S,D).

% A concern is unsatisfied in all other cases.
defined(pos,sat(C,F)) :- inference(concerns,optimistic), relevantToFunc(C,F). 


%%%% Relatedness of requirements across functions

% Definition. Requirement q1 is refined into requirement q2
% if they address the same concern in two functions F1 and F2
% and F1 is refined into F2.
refinedInto(Q1,Q2) :-
	addresses(Q1,C,F1),
	addresses(Q2,C,F2),
	refinedInto(F1,F2).

% Definition. Requirement q1 is related to requirement q2
% if there is a sequence r_1,...,r_k of requirements such that 
% q1 =r_1, q2=r_k, and every r_i is refined into r_i+1.
related(Q1,Q2) :-
	refinedInto(Q1,Q2),
	addresses(Q1,C,F1),	% make sure Q1, Q2 are requirements
	addresses(Q2,C,F2). % rather than functions

related(Q1,Q3) :-
	refinedInto(Q1,Q2),
	related(Q2,Q3).


%%%%%%%% OBSERVATIONS


% initial state of the CPS

holds(F,0) :-
	fluent(F),
	obs(F,true).

-holds(F,0) :-
	fluent(F),
	obs(F,false).

holds(F,0) :-
	fluent(F),
	assumed(F,true),
	not -holds(F,0).

-holds(F,0) :-
	fluent(F),
	assumed(F,false),
	not holds(F,0).

% Ad-hoc for prob_of_state functional fluent
holds(prob_of_state(100),0).

% next state: inertia axioms
is_defined(F) :- fluent(F), defined(M,F).

% NOTE: inertial for numerical fluents is defined on a case-by-case basis
-inertial(F) :- is_numerical(F).
-inertial(F) :- is_defined(F).

holds(F,S2) :-
	fluent(F),
	not -inertial(F),
	step(S), step(S2), S2=S+1,
	holds(F,S),
	not -holds(F,S2).

-holds(F,S2) :-
	fluent(F),
	not -inertial(F),
	step(S), step(S2), S2=S+1,
	-holds(F,S),
	not holds(F,S2).

holds(F,S) :-
	fluent(F),
	defined(neg,F),
	step(S),
	not -holds(F,S).

-holds(F,S) :-
	fluent(F),
	defined(pos,F),
	step(S),
	not holds(F,S).

% effect of a negative impact
-holds(A,S) :-
	impacted(neg,A,S).


% Ad-hoc treatment of prob_of_state functional fluent
holds(prob_of_state(P2),S2) :-
	step(S), step(S2), S2=S+1,
	holds(prob_of_state(P),S),
	do(A,S),
	prob_success(A,PSucc),
	P2a=P*PSucc,
	P2=P2a/100.

-unk_prob_success(S) :-
	step(S),
	do(A,S), prob_success(A,PSucc).
unk_prob_success(S) :-
	step(S),
	not -unk_prob_success(S).

holds(prob_of_state(P),S2) :-
	step(S), step(S2), S2=S+1,
	holds(prob_of_state(P),S),
	unk_prob_success(S).
%%%%%INSTANCES DEFINITIONS

example(case).


%%% Example 1 -- No broken windows and everything is alright
broken_percentage(0) 	  	:- example(1).
initial_w_available(1000) 	:- example(1).
min_w_quality(0)			:- example(1).
max_w_quality(3)			:- example(1).
windows_amount(500)			:- example(1).
init(available_windows(1000,Q1..Q2)) :- example(1), min_w_quality(Q1), max_w_quality(Q2).

%%% Example 2 -- 10% windows broken, Seller replace them with same quality windows
broken_percentage(10) 	  	:- example(2).
initial_w_available(1000) 	:- example(2).
min_w_quality(0)			:- example(2).
max_w_quality(3)			:- example(2).
windows_amount(550)			:- example(2).
init(available_windows(1000,1)) :- example(2).
init(available_windows(550,2)) :- example(2).
init(available_windows(1000,3)) :- example(2).

%%% Example 3 -- 10% windows broken, Seller replace them with diff quality windows (solar panel requirement satisfied)
broken_percentage(10) 	  	:- example(3).
initial_w_available(400) 	:- example(3).
min_w_quality(0)			:- example(3).
max_w_quality(3)			:- example(3).
windows_amount(220)			:- example(3).
windows_amount(330)			:- example(3).
init(available_windows(1000,1)) :- example(3).
init(available_windows(500,2)) :- example(3).
init(available_windows(1000,3)) :- example(3).

%%% Example 4 -- 10% windows broken, Seller replace them with diff quality windows (no solar panel requirement satisfied)
broken_percentage(10) 	  	:- example(4).
initial_w_available(400) 	:- example(4).
min_w_quality(0)			:- example(4).
max_w_quality(2)			:- example(4).
windows_amount(220)			:- example(4).
windows_amount(330)			:- example(4).
init(available_windows(1000,1)) :- example(4).
init(available_windows(500,2)) :- example(4).
init(available_windows(0,3)) :- example(4).


%Windows predicate -> windows(quantity,quality,heating_capacity(?))
%min_w_quality(0).
%max_w_quality(4).

min_heating_capacity(0).
max_heating_capacity(4).

%initial_w_available(1000). %Maybe add quality
initial_w_shipped(0).
initial_w_delivered(0).
initial_w_broken(0).

windows_to_buy(500).

minimum_quality(1).
minimum_environmental_quality(2).

%broken_quantity(1000). % For now constant
%broken_percentage(10). % For now constant

%windows_amount(50).
%windows_amount(100).
%windows_amount(150).
%windows_amount(220).
%windows_amount(330).
%windows_amount(500).
%windows_amount(550).
%windows_amount(500).
%windows_amount(550).

%initial_available_windows(10,Q1..Q2,C1..C2) :- min_w_quality(Q1), max_w_quality(Q2), min_heating_capacity(C1), max_heating_capacity(C2).


windows_cost(10). %Add quality dependance?
shipping_cost(50).

initial_fund_available(200000).
initial_fund_spent(0).

money_amount(100).
money_amount(500).
money_amount(1000).
money_amount(1500).
money_amount(2000).
money_amount(3500).
money_amount(4500).
money_amount(5000).
money_amount(5500).


%%%%%DOMAIN

%Initialization

%%%%%PREDICATES DEFINITIONS -- INSTANCE'S INDEPENDENT
%Windows predicate -> windows(quantity,quality,heating_capacity(?))
windows_quality(Q1..Q2) :- min_w_quality(Q1), max_w_quality(Q2).
%windows_heating_capacity(C1..C2) :- min_heating_capacity(C1), max_heating_capacity(C2).

#const maxTime=4.

step(0..maxTime).

init(available_fund(I))      :- initial_fund_available(I).
init(spent_fund(I,windows))  :- initial_fund_spent(I).
init(spent_fund(I,shipping)) :- initial_fund_spent(I).

%init(available_windows(I,Q1..Q2)) :- min_w_quality(Q1), max_w_quality(Q2), initial_w_available(I).
init(shipped_windows(I,Q1..Q2))   :- min_w_quality(Q1), max_w_quality(Q2), initial_w_shipped(I). %At the momement single receiver 
init(delivered_windows(I,Q1..Q2)) :- min_w_quality(Q1), max_w_quality(Q2), initial_w_delivered(I). %At the momement single receiver 
init(broken_windows(I,Q1..Q2))    :- min_w_quality(Q1), max_w_quality(Q2), initial_w_broken(I). %At the momement single receiver 

%%%Rules

%Amount after transactions management
	%Assume complete description --holds(lumber_board(0,G), 0)  :-  grade(G), not assume(lumber_board(_,G)).
holds(available_windows(X,Q), 0) :-  init(available_windows(X,Q)).
holds(shipped_windows(X,Q), 0)   :-  init(shipped_windows(X,Q)).
holds(delivered_windows(X,Q), 0) :-  init(delivered_windows(X,Q)).
holds(broken_windows(X,Q), 0)    :-  init(broken_windows(X,Q)).

holds(available_fund(X), 0) :-  init(available_fund(X)).
holds(spent_fund(X,T), 0)   :-  init(spent_fund(X,T)).


%Actually delivered windows -- we assume the difference is broken so not in available either
holds(available_windows(X-Z,Q), T+1)  :-  step(T), holds(available_windows(X,Q), T), observation(shipped(Z,Q),T).
holds(available_windows(X  ,Q), T+1)  :-  step(T), holds(available_windows(X,Q), T), not observation(shipped(_,Q),T).

holds(shipped_windows(X+Z,Q), T+1)    :-  step(T), holds(shipped_windows(X,Q), T), observation(shipped(Z,Q),T).
holds(shipped_windows(X  ,Q), T+1)    :-  step(T), holds(shipped_windows(X,Q), T), not observation(shipped(_,Q),T).

holds(delivered_windows(X+Z,Q), T+1)  :-  step(T), holds(delivered_windows(X,Q), T), observation(delivered(Z,Q),T).
holds(delivered_windows(X  ,Q), T+1)  :-  step(T), holds(delivered_windows(X,Q), T), not observation(delivered(_,Q),T).


holds(broken_windows(X+(S-D),Q), T+1) :-  step(T), holds(broken_windows(X,Q), T), observation(shipped(S,Q),T), observation(delivered(D,Q),T).
holds(broken_windows(X      ,Q), T+1) :-  step(T), holds(broken_windows(X,Q), T), not observation(shipped(_,Q),T).
holds(broken_windows(X      ,Q), T+1) :-  step(T), holds(broken_windows(X,Q), T), not observation(delivered(_,Q),T).


%holds(needed(X),0) :- windows_to_buy(X).
%holds(needed(X'),T+1) :- step(T), step(T+1), observation(shipped(S,_),T), holds(needed(X),T), X'=X-S.

%Delivered generation
%observation(shipped(500,2), 0).
% At the first step, buy exactly what you need
observation(shipped(X,Q), 0):- windows_to_buy(X), minimum_environmental_quality(Q), holds(available_windows(X',Q),0), X'>=X.
% At the following time steps, buy what you need to make up for any issues with the previous deliveries
1{ observation(shipped(B-Y,Q), T):windows_quality(Q), minimum_quality(MQ), Q >= MQ, holds(available_windows(A,Q),0), A>=B-Y }1 :- step(T), Y = #sum{X,Q : observation(delivered(X,Q), T'), step(T'), T'<T}, windows_to_buy(B), Y<B.
:- step(T), holds(available_windows(X1,Q), T), observation(shipped(X2,Q), T), X2 > X1.
% only one shipment at a time
:- step(T), observation(shipped(X,Q), T), observation(shipped(X',Q'), T), X!=X'.
:- step(T), observation(shipped(X,Q), T), observation(shipped(X',Q'), T), Q!=Q'.

%observation(delivered(S-B,Q),T) :- step(T), observation(shipped(S,Y), T), broken_quantity(B).
observation(delivered(S-((S/100)*B),Q),T) :- step(T), observation(shipped(S,Q), T), broken_percentage(B).

%Basic Constraints
%:- step(T), T > 0, observation(shipped(X1,Q),T), holds(available_windows(I,Q), T), init(available_windows(I,Q)). %Impossible that initial availability is the same if delivered
%:- step(T), #count{windows_quality(Q), windows_amount(X): observation(shipped(X,Q),T)} > 1.

%Payment Management
{observation(paid(X,  windows),	T) : money_amount(X)} 1 :- step(T).
:- step(T), observation(paid(X,  windows),	T), holds(available_fund(Y), T), Y < X.

{observation(paid(X, shipping), T) : money_amount(X)} 1 :- step(T).
:- step(T), observation(paid(X,  shipping),	T), holds(available_fund(Y), T), Y < X.

holds(available_fund(A-P), T+1)	:-  step(T), holds(available_fund(A), T), P = #sum{M : observation(paid(M,_), T)}.
holds(available_fund(A  ), T+1)	:-  step(T), holds(available_fund(A), T), not observation(paid(_,_), T).


holds(spent_fund(S+P,Y), T+1)	:-	step(T), holds(spent_fund(S,Y), T), observation(paid(P,Y), T).
holds(spent_fund(S  ,Y), T+1)	:-	step(T), holds(spent_fund(S,Y), T), not observation(paid(_,Y), T).


%%%CLAUSES

% S: Seller
% B: Buyer

% C1: S responsible_for		shipped(500,Q), MQ <= Q								when	by_week 4 (between T1 and T2) -- We are not sure on how many windows will break
% C2: S	responsible_for		delivered(500,Q), MQ <= Q							when	by_week 4 (between T1 and T2) -- This enforces the right delivery
% C3: B	responsible_for		paid(windows_needed*windows_cost)  				 	when  	by_week 4
% C4: B	responsible_for		exists(X), X >= shipping_cost, paid(X, shipping)  	when  	by_week 4

% C5: S responsible_for		delivered(500,Q), ENV_Q <= Q						when	by_week 4 (between T1 and T2) -- For the solar panel requirement


clause(c1, seller,	phi_1, by(3,4)).
clause(c1_mono, seller,	phi_1_mono, by(3,4)). %To enforce mono quality if possible
clause(c2, seller,	phi_2, by(3,4)).
clause(c2_mono, seller,	phi_2_mono, by(3,4)). %To enforce mono quality if possible
clause(c3, buyer,	phi_3, by(3,4)).
clause(c4, buyer,	phi_4, by(3,4)).

clause(c5, seller,	phi_5, by(3,4)).

%New Constraint -- impossibile to  have total received windows different from total requested windows
:- Y = #sum{X,Q : holds(delivered_windows(X,Q), maxTime+1)}, Y != B, windows_to_buy(B).


%%% CLAUSE 1 -- PHI 1 -- Different encoding are possible swithcing between observation and hold

%% Multi Quality

holds(phi_1, T) :- step(T), Y = #sum{X : holds(shipped_windows(X,Q), T), windows_quality(Q)}, Y >= B, windows_to_buy(B).
%holds(phi_1, T) :- step(T), Y = #sum{X,Q,T1 : observation(shipped(X, Q), T1), Q>=MQ, T>=T1}, Y >= B, windows_to_buy(B), minimum_quality(MQ).

%%% Mono Quality -- we add this so that the windows are all the same quality if possible -- only activated when the previous is
holds(phi_1_mono, T) :- step(T), holds(shipped_windows(X,Q), T), X >= B, windows_to_buy(B).

%%%%%%%%%%%%%%%%%%%%%%%%%%


%%% CLAUSE 2 -- PHI 2 -- Different encoding are possible swithcing between observation and hold

%% Multi Quality
holds(phi_2, T) :- step(T), Y = #sum{X : holds(delivered_windows(X,Q), T), windows_quality(Q)}, Y >= B, windows_to_buy(B).

%%% Mono Quality -- we add this so that the windows are all the same quality if possible -- only activated when the previous is
holds(phi_2_mono, T) :- step(T), holds(delivered_windows(X,Q), T), X >= B, windows_to_buy(B).
multi_quality_delivered :- not holds(phi_2_mono,_).
%%% Prints the windows distribution
final_multi_distribution(Y,Q) :- multi_quality_delivered, holds(delivered_windows(Y,Q), maxTime+1), Y > 0.
final_mono_distribution(Y,Q)  :- not multi_quality_delivered, holds(delivered_windows(Y,Q), maxTime+1), Y >= B, windows_to_buy(B).


%holds(phi_2, T) :- step(T), Y = #sum{X,Q,T1 : observation(delivered(X, Q), T1), Q>=MQ, T>=T1}, Y >= B, windows_to_buy(B), minimum_quality(MQ).
%
%%% Mono Quality -- we add this so that the windows are all the same quality if possible -- only activated when the previous is
%holds(phi_2_mono, T) :- step(T), holds(delivered_windows(X, Q), T), Q>=MQ, X >= B, windows_to_buy(B), minimum_quality(MQ), holds(phi_2, T).
%
%%%% Prints the windows distribution
%replacement(X,Q,T) :- step(T), holds(phi_2, T), not holds(phi_2_mono, T),
%					observation(delivered(X, Q), T1), T >= T1.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%


%%% CLAUSE 3 -- PHI 3

%% paying the full contract

% Payment independet from delivery status
holds(phi_3, T) :- step(T), holds(spent_fund(P,windows), T), P >= B*C, windows_to_buy(B), windows_cost(C).
% Only delivered windows version
%holds(phi_3, T) :- step(T), holds(spent_fund(P,windows), T), P >= X*C, holds(delivered_windows(X,Q),maxTime), windows_cost(C), minimum_quality(MQ)

%%% paying as needed -- REMOVED For now because we allow delayed payment (needed only before week 4)
%holds(phi_3, T) :- step(T), holds(board_cost(0), T).

%%%%%%%%%%%%%%%%%%%%%%%%%%


%%% CLAUSE 4 -- PHI 4

%For now is just a single shipping cost, we can make it dependent of every single transaction
holds(phi_4, T) :- step(T), holds(spent_fund(P,shipping), T), shipping_cost(C), P >= C.

%%%%%%%%%%%%%%%%%%%%%%%%%%


%%% CLAUSE 5 -- PHI 5

holds(phi_5, T) :- step(T), Y = #sum{X,Q,T1 : observation(delivered(X, Q), T1), Q>=ENV_Q, T>=T1}, Y >= B, windows_to_buy(B), minimum_environmental_quality(ENV_Q).
%%%%%%%%%%%%%%%%%%%%%%%%%%


%%% satisfaction of clauses

satisfies(C, T) :- step(T), clause(C, _, F, by(N)), T<=N, holds(F, T).
not_satisfies(C, T) :- step(T), clause(C, _, F, by(N)), T<=N, not holds(F, T).
satisfies(C, T) :- step(T), clause(C, _, F, by(M,N)), M<=T, T<=N, holds(F, T).
not_satisfies(C, T) :- step(T), clause(C, _, F, by(M,N)), M<=T, T<=N, not holds(F, T).

good(N) :- N = #count{C : satisfies(C, maxTime)}.
#maximize {N : good(N)}.
%#maximize {Z : holds(available_fund(Z), maxTime+1)}.


%%%

%#maximize {Z : holds(available_fund(Z), maxTime+1)}.

%*
#show.

% #show holds/2.
#show occurs/2.
#show observation/2.
#show received(board(X,Y), T) : observation(delivered(X,Y), T).
#show satisfies(X) : satisfies(X, maxTime).
#show not_satisfies(X) : not_satisfies(X, maxTime).
#show replacement/2.
 #show good/1.
*%



holds(sat("sufficient_material_for_building"), T):- step(T), holds(phi_1,T).
-holds(sat("sufficient_material_for_building"), T):- step(T), not holds(phi_1,T).

holds(sat("material_ready_for_building"), T):- step(T), holds(phi_2,T). %Name changed from "material_safe_for_building" to "material_ready_for_building"
-holds(sat("material_ready_for_building"), T):- step(T), not holds(phi_2,T). %Name changed from "material_safe_for_building" to "material_ready_for_building"

holds(sat("material_sufficiently_durable"), T):- step(T), holds(phi_2,T).
-holds(sat("material_sufficiently_durable"), T):- step(T), not holds(phi_2,T).


holds(sat("promptly_send_payment"),		T):- step(T), holds(phi_3,T).
-holds(sat("promptly_send_payment"), 	T):- step(T), not holds(phi_3,T).


holds(sat("acceptable_shipping_cost"),	T):- step(T), holds(phi_4,T).
-holds(sat("acceptable_shipping_cost"), T):- step(T), not holds(phi_4,T).

%%%%% Newly introduced requirement
holds(sat("solar_panel_requirement"), T):- step(T), holds(phi_5,T).
-holds(sat("solar_panel_requirement"), T):- step(T), not holds(phi_5,T).


%%%%%%%%% SHOWS and DEBUG

total(A) :- A = #sum{X,Q,T1 : observation(delivered(X, Q), T1), Q>=ENV_Q, T>=T1}, T = maxTime, minimum_environmental_quality(ENV_Q).
final_sat(X) :- holds(sat(X),_).
aval_w(X,Y,T) :- holds(available_windows(X,Y), T).
ship_w(X,Y,T) :- holds(shipped_windows(X,Y), T).
obs_ship(X,Y,T) :- observation(shipped(X,Y), T).

obs_payment(X,Y,T) :- observation(paid(X, Y),	T).
aval_fund(A,T) :- holds(available_fund(A), T).
spent_fund(S,Y,T) :- holds(spent_fund(S,Y), T).

%%%% Prints the windows distribution
replacement(X,Q,T) :- step(T), T>0, observation(shipped(X, Q), T).


%*
#show final_sat/1.
#show final_mono_distribution/2.
#show final_multi_distribution/2.
%#show replacement/3.
%#show total/1.
%#show aval_w/3.
%#show ship_w/3.
%#show obs_ship/3.
%#show obs_payment/3.
%#show aval_fund/2.
%#show spent_fund/3.
%holds(sat("mono1"), T):- step(T), holds(phi_1_mono,T).
%-holds(sat("mono1"), T):- step(T), not holds(phi_1_mono,T).
%holds(sat("mono2"), T):- step(T), holds(phi_2_mono,T).
%-holds(sat("mono2"), T):- step(T), not holds(phi_2_mono,T).
*%
% To reduce the output, manually ground the following rule for concerns C that you are interested in

relevantToFunc("cpsf:Cost","cpsf:bc2")                  :- concern("cpsf:Cost").
relevantToFunc("cpsf:TimeToMarket","cpsf:bc2")   :- concern("cpsf:TimeToMarket").
relevantToFunc("cpsf:Policy","cpsf:bc2")                :- concern("cpsf:Policy").
relevantToFunc("cpsf:Performance","cpsf:bc2")     :- concern("cpsf:Performance").
relevantToFunc("cpsf:Reliability","cpsf:bc2")          :- concern("cpsf:Reliability").
relevantToFunc("cpsf:Safety","cpsf:bc2")               :- concern("cpsf:Safety").
relevantToFunc("cpsf:Environment","cpsf:bc2")               :- concern("cpsf:Environment").

% Quick workaround since I forgot to include descriptions for the new properties
descr(P,P) :- atomic_statement(P,A), not input(P,"rdfs:comment",_).

% The pair <Clause_ID, A> is in the private part of the contract. A is a property/requirement
private_part(C,A) :- input(C,"cpsf:addProperty",P), atomic_statement(P,A).

holds(impacted(C,"cpsf:bc2",pos),S) :-
	step(S),
	private_part(_,A),
	holds(sat(A),S),
	atomic_statement(P,A),
	input(P,"cpsf:addConcern",C).

holds(impacted(C,"cpsf:bc2",neg),S) :-
	step(S),
	private_part(_,A),
	-holds(sat(A),S),
	atomic_statement(P,A),
	input(P,"cpsf:addConcern",C).


% There are some LKAS properties in the base ontology that cause
% certain concerns to be satisfied. This rule ensures that
% all concerns addressed by properties that are not in a
% contract's private part are impacted negatively
holds(impacted(C,F,neg),S) :-
	step(S),
	addresses(A,C,F),
	not private_part(_,A).

%% Link the internal names of clauses to their ontology names
%holds(sat("sufficient_material_for_building"), T):- step(T), holds(phi_1,T).
%-holds(sat("sufficient_material_for_building"), T):- step(T), not holds(phi_1,T).
%
%holds(sat("material_safe_for_building"), T):- step(T), holds(phi_2,T).
%-holds(sat("material_safe_for_building"), T):- step(T), not holds(phi_2,T).
%
%holds(sat("material_sufficiently_durable"), T):- step(T), holds(phi_2,T).
%-holds(sat("material_sufficiently_durable"), T):- step(T), not holds(phi_2,T).
%
%holds(sat("acceptable_shipping_cost"), T):- step(T), holds(phi_3,T).
%-holds(sat("acceptable_shipping_cost"), T):- step(T), not holds(phi_3,T).
%
%holds(sat("promptly_send_payment"), T):- step(T), holds(phi_4,T).
%-holds(sat("promptly_send_payment"), T):- step(T), not holds(phi_4,T).
% ------ Output Interface ------

descr("using_basic_input1","Basic type of input device 1 is in use").
event_descr(recipient_rejects,"recipient rejects input").
action_descr(patch(sam),"patch the SAM").
