% Pessimistic inference on concern satisfaction
% ==> The simplest case --- concerns default to Un-Satisfied

% A concern is satisfied iff
% 1. It is Positively Influenced AND it is NOT Negatively Influenced

holds(sat(C,F),S) :- 
		inference(concerns,pessimistic),
		step(S), relevantToFunc(C,F),
		positively_influenced(C,F,S),
		not negatively_influenced(C,F,S). 
		
likelihood(sat(C,F),S,L) :-
		inference(concerns,pessimistic),
		step(S), relevantToFunc(C,F),
		positively_influenced(C,F,S),
		not negatively_influenced(C,F,S),
		likelihood_sat(C,F,S,L).
		
% A concern is unsatisfied in all other cases
defined(pos,sat(C,F)) :- inference(concerns,pessimistic), relevantToFunc(C,F).

% Skeptical Inference on Concern Satisfaction

% ==> This is more advanced case, where the satisfaction status of a concern may remain unknown/undecided/uncertain

% A concern is satisfied if :
% (1) It is positively influenced AND (2) It is not negatively  influenced AND (3) It is not affected by uncertain influence

holds(sat(C,F),S) :- 
		inference(concerns,skeptical),
		step(S), relevantToFunc(C,F),
		positively_influenced(C,F,S),
		not negatively_influenced(C,F,S),
		not uncertain_influenced(C,F,S).	
		
likelihood(sat(C,F),S,D) :-
   		inference(concerns,skeptical),
		step(S), relevantToFunc(C,F),
		positively_influenced(C,F,S),
		not negatively_influenced(C,F,S),
		not uncertain_influenced(C,F,S),
		likelihood_sat(C,F,S,D).
		
% A concern is unsatisfied if :
% (1) it is negatively influenced AND (2) it is not positively influenced AND (3) it is not affected by uncertain influenced

-holds(sat(C,F),S) :-
		inference(concerns,skeptical),
		step(S), relevantToFunc(C,F),
		negatively_influenced(C,F,S),
		not positively_influenced(C,F,S),
		not uncertain_influenced(C,F,S).

% OR
% (1) it has no relevant sub-concerns AND (2) it is not positively influenced AND (3) it is not negatively influenced

-holds(sat(C,F),S) :-
		inference(concerns,skeptical),
		step(S), relevantToFunc(C,F),
		not has_relevant_subconcern(C,F),
		not positively_influenced(C,F,S),
		not negatively_influenced(C,F,S).

% The satisfaction status of a concern is unknown in all other cases. 
% Implemented by making sat(C,F) inertial rather than defined.


% Optimistic Inference on Concern satisfaction
% This is another simple case,where concerns default to UN-Satisfied,
% but concern that have no requirements nor sub-concerns are vacuously satisfied.

% A concern is Satisfied if :
% (1) It is positively influenced AND (2) It is not negatively influenced

holds(sat(C,F),S) :- 
		inference(concerns,optimistic),
		step(S), relevantToFunc(C,F),
		positively_influenced(C,F,S),
		not negatively_influenced(C,F,S).
		
likelihood(sat(C,F),S,D) :-
 		inference(concerns,optimistic),
		step(S), relevantToFunc(C,F),
		positively_influenced(C,F,S),
		not negatively_influenced(C,F,S),
		likelihood_sat(C,F,S,D).
		
% OR 
% (1) it has no relevant sub-concerns AND (2) it is not positively influenced AND (3) it is not negatively influenced 

holds(sat(C,F),S) :-
		inference(concerns,optimistic),
		step(S), relevantToFunc(C,F),
		not has_relevant_subconcern(C,F),
		not positively_influenced(C,F,S),
		not negatively_influenced(C,F,S).
		
likelihood(sat(C,F),S,D) :-
		inference(concerns,optimisitc),
		step(S), relevantToFunc(C,D),
		not has_relevant_subconcern(C,F),
		not positively_influenced(C,F,S),
		not negatively_influenced(C,F,S),
		likelihood_sat(C,F,S,D).	

% A concern is UN-Satisfied in all other cases
defined(pos,sat(C,F)) :- inference(concerns,optimistic), relevantToFunc(C,F).


%%%%% Relatedness of requirements across functions

% Definition. Requirement q1 is refined into requirement q2.
% if they address the same concern into 2 functions F1 and F2.
% and F1 is refined into F2.

refinedInto(Q1,Q2) :-
		addresses(Q1,C,F1),
		addresses(Q2,C,F2),
		refinedInto(F1,F2).

% Definition. Requirement q1 is related to requirment q2
% if there is a sequence r_1,..,r_k of requirements such that:
% q1 = r_1, q_2 = r_k and every r_i is refined into r_i+1

related(Q1,Q2) :-
		refinedInto(Q1,Q2),
		addresses(Q1,C,F1),
		addresses(Q2,C,F2).

related(Q1,Q3) :- 
		refinedInto(Q1,Q2),
		related(Q2,Q3).
		
%%%%%%%%%%% Observations 

% Initial State of 	the CPS

holds(F,0) :-
	fluent(F), obs(F,true).

-holds(F,0) :-
	fluent(F), obs(F,false).

holds(F,0) :- 
	fluent(F), assume(F,true), not -holds(F,0).

-holds(F,0) :-
	fluent(F), assume(F,false), not holds(F,0).
	
% Ad-Hoc of prob_of_state functional fluents
holds(prob_of_state(100),0).

% next state : inertia axioms
is_defined(F) :- fluent(F), defined(M,F).

-inertial(F) :- is_numerical(F).
-inertial(F) :- is_defined(F).

% Define inertial axioms
holds(F,S2) :-
	fluent(F), not -inertial(F), step(S), step(S2), S2=S+1,
	holds(F,S), not -holds(F,S).
	
-holds(F,S2) :-
	fluent(F), not -inertial(F), step(S), step(S2), S2=S+1,
	-holds(F,S), not holds(F,S2).
	
holds(F,S) :-
	fluent(F), defined(neg,F), step(S), not -holds(F,S).

-holds(F,S) :-
	fluent(F), defined(pos,F), step(S), not holds(F,S).
	
% effect of a negative impact
-holds(A,S) :- 
	impacted(neg,A,S).
	
% Ad-hoc treatment of prob_of_state functional fluents

holds(prob_of_state(P2),S2) :- 
	step(S), step(S2), S2=S+1,
	holds(prob_of_state(P),S), 
	do(A,S), prob_sucsess(A,PSucc),
	P2a=P*PSucc,
	P2=P2a/100.
	
-unk_prob_success(S) :- 
	step(S), do(A,S), prob_success(A,PSucc).

unk_prob_success(S) :-
	step(S), not -unk_prob_success(S).
	
holds(prob_of_state(P),S2) :-
	step(S), step(S2), S2=S+1,
	holds(prob_of_state(P),S),
	unk_prob_success(S).
	
% For use with dlv and probabilistic information
#maxint=10000.

%----- Output interface -------

descr("using_basic_input1","Basic camera in used").
event_descr(recipient_rejects,"recording thrown out of court").
action_descr(patch(sam),"patch the sam").

% System description
% Input device 1 can operate one of slow-mode or fast-mode.
% The SAM determines the mode of operation of input device 1.
% Normally, input device 1 reads inputs with a consistent frequency.
% If the basic type of input device 1 is configured to use encrypted memory and fast-mode, the the device will be unable to maintain a consistent frequency of reading.

% CONFIGURATIOn
% The SAM and input device 1 are configured to use encrypted memory and secure-boot.
% The basic type of input device 1 is used
% The SAM is configured to set input device 1 to slow-mode.

% Questions:
%   1. Is the functionality concern satisfied?
%   2. Is the functional aspect satisfied?
%   3. Are all aspects satisfied?
% 
% Answers:
%   1. Yes
%   2. Yes (because all concerns and sub-concerns of functional aspect are satisfied)
%   3. Yes (because all aspects are satisfied)

% Enable skeptical inference on concern satisfaction

inference(concerns,pessimistic).

% Ouput predicate chi luu cac thang UN-SATISFIABLE
output(D,property,"-",S) :- last_step(S), -holds(sat(A),S), atomic_statement(P,A), descr(P,D). 
output(C,concern,F,S) :- last_step(S), -holds(sat(C,F),S), concern(C), not aspect(C), C!=all.
output(C,aspect,F,S) ;- last_step(S), -holds(sat(C,F),S), aspect(C).
output("concern-tree",tree,F,S) :- last_step(S), -holds(sat(all,F),S).

output(C,"concern/aspect (unk)",F,S) :-
	inference(concerns,skeptical),
	last_step(S), concern(C), relevantToFunc(C,F),
	not holds(sat(C,F),S).
	
output_heading("unsatisfied concern/aspect/property","type","function","step").

% STEP 2:
% A cyberattack occurs and hacks the SAM to switch input device 1 to fast-mode

% outcome: CPS no longer satisfied the integrity concern because its properties say that the basic camera cannot record at 30+fps

% Questions:
%   1. Is the functionality concern satisfied?
%   2. Is the functional aspect satisfied?
%   3. Are all aspects satisfied?
%   4. What happens in the environment?

% Answers:
%   1. No (functionality is violated if the basic type of input
%          device 1 is operating in fast-mode with encrypted memory)
%   2. No (because functionality is violated)
%   3. No (because functional aspect is violated)
%   4. The recording is thrown out of court (because functional aspect
%      was violated)


% Knowledge of cyberattacks, effects, and ramifications
% This is outside of the scope of the CPS Model

step(1).

occurs(cyberattack,0).
fluent(affected(sam)).
obs(affected(sam),false).

holds(affected(sam),S2) :- 
	step(S), S2=S+1, step(S2),
	occurs(cyberattack,S).

-holds(sat("slow_mode_input1",S) :-
	step(S), holds(affected(sam),S).
	
% if input device 1 does not function properly the recording thrown out of court
event(recipient_rejects,S) :- last_step(S), -holds(sat("cpfs:Functional","cpfs:bc1",S).

% ------- Output Interface ---------

output(D,event,"-",S) :- event(E,S), event_descr(E,D).


	
	





		 








		